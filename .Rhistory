geom_function(fun = function(x) N0*exp(rm*x), colour = "red")
rm_per_day<-0.001 # per day
rm_per_year<- rm_per_day*365
rm_per_year
plants<-data.frame(t=1:6)
plants$N1<-10^plants$t
plants$N2<-10.5^plants$t
ggplot(plants,aes(x=t))+
geom_line(aes(y=N1,color="R=10"))+
geom_line(aes(y=N2,color="R=10.5"))
log(2)/0.0143
humans<-read.csv("humanPopulation.csv")%>%
filter(Year <1900)
ggplot(humans,aes(x=Year,y=Population))+
geom_point()
ggplot(humans,aes(x=Year,y=log(Population)))+
geom_point()+
geom_smooth(method="lm")
Human.lm<-lm(log(Population)~Year,data=humans)
summary(Human.lm)
tinytex::reinstall_tinytex(repository = "illinois")
install.packages('tinytex')
tinytex::install_tinytex()
# writeLines(c(
#   '\\documentclass{article}',
#   '\\begin{document}', 'Hello world!', '\\end{document}'
# ), 'test.tex')
tinytex::pdflatex('test.tex')
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
# writeLines(c(
#   '\\documentclass{article}',
#   '\\begin{document}', 'Hello world!', '\\end{document}'
# ), 'test.tex')
tinytex::pdflatex('test.tex')
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
# writeLines(c(
#   '\\documentclass{article}',
#   '\\begin{document}', 'Hello world!', '\\end{document}'
# ), 'test.tex')
tinytex::pdflatex('test.tex')
writeLines(c(
'\\documentclass{article}',
'\\begin{document}', 'Hello world!', '\\end{document}'
), 'test.tex')
tinytex::pdflatex('test.tex')
library(ISwR)
?ISwR
head(react)
library(abd)
tree<-read.csv(html("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q26NeotropicalTreePhotosynthesis.csv"))
tree<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q26NeotropicalTreePhotosynthesis.csv"))
head(tree)
tree<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q26NeotropicalTreePhotosynthesis.csv"))
ggplot(tree,aes(x=previousFruits,y=photosyntheticCapacity))+
geom_points()+
labs(x="Previous Fruits",y="Photosynthetic Capacity")
tree<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q26NeotropicalTreePhotosynthesis.csv"))
ggplot(tree,aes(x=previousFruits,y=photosyntheticCapacity))+
geom_point()+
labs(x="Previous Fruits",y="Photosynthetic Capacity")
tree<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q26NeotropicalTreePhotosynthesis.csv"))
ggplot(tree,aes(x=previousFruits,y=photosyntheticCapacity))+
geom_point()+
#  labs(x="Previous Fruits",y="Photosynthetic Capacity") # or
xlab("Previous Fruits")+ylab("Photosynthetic Capacity")
tree<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q26NeotropicalTreePhotosynthesis.csv"))
ggplot(tree,aes(x=previousFruits,y=photosyntheticCapacity))+
geom_point()+
#  labs(x="Previous Fruits",y="Photosynthetic Capacity") # or
xlab("Previous Fruits")+ylab("Photosynthetic Capacity")
summary(hemoglobin)
hemoglobin<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02e3bHumanHemoglobinElevation.csv"))
summary(hemoglobin)
ggplot(hemoglobin,aes(x=hemoglobin))+
geom_histogram(fill="darkred")+
facet_wrap(~population)
ggplot(hemoglobin,aes(x=hemoglobin))+
geom_histogram(fill="darkred")+
facet_wrap(~population,ncol=1)
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_violin()
library(ggplot2)
theme_set(theme_bw())
library(ggplot2)
theme_set(theme_bw())
tree<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q26NeotropicalTreePhotosynthesis.csv"))
ggplot(tree,aes(x=previousFruits,y=photosyntheticCapacity))+
geom_point()+
#  labs(x="Previous Fruits",y="Photosynthetic Capacity") # or
xlab("Previous Fruits")+ylab("Photosynthetic Capacity")
hemoglobin<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02e3bHumanHemoglobinElevation.csv"))
summary(hemoglobin)
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_violin()
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_violin(fill="lightblue")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_violin(fill="lightblue")+
labs(x=Population,y="Hemoglobin concentration(g/dL)")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_violin(fill="lightblue")+
labs(x="Population",y="Hemoglobin concentration(g/dL)")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_point(fill="lightblue")+
labs(x="Population",y="Hemoglobin concentration(g/dL)")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_point(alpha=0.5)+
labs(x="Population",y="Hemoglobin concentration(g/dL)")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_jitter(alpha=0.5,width=0.1,height=0)+
labs(x="Population",y="Hemoglobin concentration(g/dL)")
ggplot(hemoglobin,aes(x=hemoglobin))+
geom_histogram(fill="darkred")+
facet_wrap(~population,ncol=1)
ggplot(hemoglobin,aes(x=hemoglobin))+
geom_histogram(fill="darkred")+
facet_wrap(~population,ncol=1,scale="free")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_point(alpha=0.5,position = position_jitter(width=0.1)) # or
#  geom_jitter(alpha=0.5,width=0.1,height=0)+
labs(x="Population",y="Hemoglobin concentration(g/dL)")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_point(alpha=0.5,position = position_jitter(width=0.2)) # or
#  geom_jitter(alpha=0.5,width=0.2,height=0)+
labs(x="Population",y="Hemoglobin concentration(g/dL)")
ggplot(hemoglobin,aes(x=population,y=hemoglobin))+
geom_point(alpha=0.5,position = position_jitter(width=0.2))+ # or
#  geom_jitter(alpha=0.5,width=0.2,height=0)+
labs(x="Population",y="Hemoglobin concentration(g/dL)")
toxoplasma<-data.frame(Infected=c("Infected","Infected","Uninfected","Uninfected"),
Accident=c("Acccident","Control","Accident","Control"),
Count=c(21,38,38,211))
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col()
toxoplasma<-data.frame(Infected=c("Infected","Infected","Uninfected","Uninfected"),
Accident=c("Accident","Control","Accident","Control"),
Count=c(21,38,38,211))
toxoplasma<-data.frame(Infected=c("Infected","Infected","Uninfected","Uninfected"),
Accident=c("Accident","Control","Accident","Control"),
Count=c(21,38,38,211))
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col()
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col(position=position_dodge())
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col()
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col(position=position_dodge())
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col()
toxoplasma<-data.frame(Infected=c("Infected","Infected","Uninfected","Uninfected"),
Accident=c("Accident","Control","Accident","Control"),
Count=c(21,38,38,211))
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col(position=position_dodge())
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col()
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col(position=position_dodge())+
scale_fill_manual(values=c("darkblue","lightblue"))
toxoplasma<-data.frame(Infected=c("Infected","Infected","Uninfected","Uninfected"),
Accident=c("Accident","Control","Accident","Control"),
Count=c(21,38,38,211))
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col(position=position_dodge())+
scale_fill_manual(values=c("darkblue","lightblue"))
install.packages("ggmosaic")
ggplot(toxoplasma)+
geom_mosaic(aes(x=product(Infected,Accident)))
library(ggmosaic)
ggplot(toxoplasma)+
geom_mosaic(aes(x=product(Infected,Accident)))
library(ggmosaic)
ggplot(toxoplasma)+
geom_mosaic(aes(x=product(Infected,fill=Accident)))
library(ggmosaic)
ggplot(toxoplasma)+
geom_mosaic(aes(x=product(Infected),fill=Accident))
library(ggmosaic)
ggplot(toxoplasma)+
geom_mosaic(aes(x=product(Infected,fill=Accident)))
ggplot(toxoplasma)+
geom_mosaic(aes(x=product(Infected,Accident),fill=Accident)))
library(ggmosaic)
ggplot(toxoplasma)+
geom_mosaic(aes(x=product(Infected,Accident),fill=Accident))
toxoplasmaLong<-uncount(toxoplasma,Count)
toxoLong<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q32ToxoplasmaAccidents.csv"))
ggplot(toxoplasma,aes(x=Infected,y=Count,fill=Accident))+
geom_col(position=position_dodge())+
color_fill_manual(values=c("darkblue","lightblue"))
names(toxoLong)
toxoLong<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q32ToxoplasmaAccidents.csv"))
names(toxoLong)
ggplot(toxoplasma,aes(x=infectionStatus,y=Count,fill=driverType))+
geom_par(position=position_dodge())+
scale_fill_manual(values=c("darkblue","lightblue"))
toxoLong<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q32ToxoplasmaAccidents.csv"))
names(toxoLong)
ggplot(toxoplasma,aes(x=infectionStatus,y=Count,fill=driverType))+
geom_bar(position=position_dodge())+
scale_fill_manual(values=c("darkblue","lightblue"))
toxoLong<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q32ToxoplasmaAccidents.csv"))
names(toxoLong)
ggplot(toxoLong,aes(x=infectionStatus,y=Count,fill=driverType))+
geom_bar(position=position_dodge())+
scale_fill_manual(values=c("darkblue","lightblue"))
toxoLong<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter02/chap02q32ToxoplasmaAccidents.csv"))
names(toxoLong)
ggplot(toxoLong,aes(x=infectionStatus,fill=driverType))+
geom_bar(position=position_dodge())+
scale_fill_manual(values=c("darkblue","lightblue"))
10/12
100/12
13*4+5*2
13*5+6*2
13*5+8*2
13*5+10*2
13*5+5*5
ggplot(toxoLong,aes(x=infectionStatus,fill=driverType))+
geom_bar()+
scale_fill_manual(values=c("darkblue","lightblue"))+
labs(x="Infection status",y="Accident history")
load("C:/Users/ebabcock/Box/Fisheries classes/MBE713/lectures/4.Surplus production models/SWO/SWO_Pella_jabba.rdata")
library(JABBA)
View(jabba)
16*6
setwd("~/GitHub/TeachingTools")
logit
logit<-function(x) log(x)/log(1-x)
ilogit<-function(x) exp(x)/(1+exp(x))
library(tidyverse)
logit<-function(x) log(x)/log(1-x)
ilogit<-function(x) exp(x)/(1+exp(x))
?glm
toy<-data.frame(x=runif(1000)) %>%
mutate(p=ilogit(x),
presence=rbinom(1000,1,p),
mu=0.5*x,
intensity=dlnorm(mu,0.2))
toy<-data.frame(x=runif(1000)) %>%
mutate(p=ilogit(x),
presence=rbinom(1000,1,p),
mu=0.5*x,
intensity=rlnorm(1000,mu,0.2))
view(toy)
toy<-data.frame(x=runif(1000)) %>%
mutate(p=ilogit(0.5*x),
presence=rbinom(1000,1,p),
mu=x,
intensity=rlnorm(1000,mu,0.2))
view(toy)
newData<-data.frame(x=seq(0,1,0.1))
logit.pred<-predict(logit.glm,type="link",se.fit=TRUE)
logit.glm<-glm(presence~x,data=toy)
newData<-data.frame(x=seq(0,1,0.1))
logit.pred<-predict(logit.glm,type="link",se.fit=TRUE)
logit.pred
newData<-data.frame(x=seq(0,1,0.1))
logit.pred<-predict(logit.glm,type="link",se.fit=TRUE,newdata=newData)
logit.pred
newData<-data.frame(x=seq(0,1,0.1))
logit.pred<-predict(logit.glm,type="link",se.fit=TRUE,newdata=newData) %>%
as.data.frame()
logit.pred
logit.glm<-glm(presence~x,data=toy,family="binomial")
logit.glm
?predict
?predict.glm
library(glmmTMB)
?predict.glmmTMB
logit.glm<-glmmTMB(presence~x,data=toy,family="binomial")
newData<-data.frame(x=seq(0,1,0.1))
logit.pred<-predict(logit.glm,type="link",
se.fit=TRUE,
cov.fit=TRUE,
newdata=newData)
summary(logit.pred)
logit.pred
newData<-data.frame(x=seq(0,1,0.1))
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE) %>%
as.data.frame()
logit.fit
logit.fit$deriv<-as.vector(exp(fit)/(exp(predvallink)+1)^2)
logit.fit
#add derivative of inverse logit
logit.fit<-logit.fit %>% mutate(derivative=exp(fit)/(exp(fit)+1)^2))
#add derivative of inverse logit
logit.fit<-logit.fit %>% mutate(derivative=exp(fit)/(exp(fit)+1)^2)
newData<-data.frame(x=seq(0,1,0.1))
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE,
cov.fit=TRUE)
logit.fit
summary(logit.fit)
#add derivative of inverse logit
logit.fit$derivative<-exp(fit)/(exp(fit)+1)^2
#add derivative of inverse logit
logit.fit$derivative<-exp(logit.fit$fit)/(exp(logit.fit$fit)+1)^2
newData<-data.frame(x=seq(0,1,0.1))
```{r}
prob.fit<-predict(logit.glm,type="response",
se.fit=TRUE) %>%
as.data.frame()
prob.fit
```{r}
newData<-data.frame(x=seq(0,1,0.1))
prob.fit<-predict(logit.glm,
type="response",
se.fit=TRUE,
newdat=newData) %>%
as.data.frame()
prob.fit
logit.fit<-logit.fit %>% mutate(probability=ilogit(fit))
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE)%>%
as.data.frame()
logit.fit<-logit.fit %>% mutate(probability=ilogit(fit))
head(logit.fit)
logit.fit<-logit.fit %>% mutate(prob=ilogit(fit),
se.prob=prob*(1-prob)*se.fit)
logit.fit
view(logit.fit)
log.glm<-glmmTMB(intensity~x,data=toy,family=Gamma(link="log"))
newData<-data.frame(x=seq(0,1,0.1))
response.fit<-predict(log.glm,
type="response",
se.fit=TRUE,
newdat=newData) %>%
as.data.frame()
response.fit
response.fit
link.fit<-predict(log.glm,
type="link",
se.fit=TRUE,
newdat=newData) %>%
as.data.frame()
link.fit<-link.fit %>% mutate(mu=exp(fit),
deriv=exp(fit),
se.mu=deriv*mu*deriv)
link.fit
link.fit<-predict(log.glm,
type="link",
se.fit=TRUE,
newdat=newData) %>%
as.data.frame()
link.fit<-link.fit %>% mutate(mu=exp(fit),
deriv=exp(fit),
se.mu=deriv*mu^2*deriv)
link.fit
?response.fit
?predict.glmmTMB
link.fit<-predict(log.glm,
type="link",
se.fit=TRUE,
newdat=newData) %>%
as.data.frame()
link.fit<-link.fit %>% mutate(mu=exp(fit),
deriv=exp(fit),
se.mu=sqrt(deriv*mu^2*deriv)))
link.fit<-predict(log.glm,
type="link",
se.fit=TRUE,
newdat=newData) %>%
as.data.frame()
link.fit<-link.fit %>% mutate(mu=exp(fit),
deriv=exp(fit),
se.mu=sqrt(deriv*mu^2*deriv))
link.fit
link.fit<-predict(log.glm,
type="link",
cov.fit=TRUE,
newdat=newData)
link.fit<-predict(log.glm,
type="link",
se.fit=TRUE,
cov.fit=TRUE,
newdat=newData)
link.fit$mean<-exp(link.fit$fit)
link.fit$mean<-exp(link.fit$fit)
link.fit$deriv<-exp(link.fit$fit) #derivative of exp(x) is exp(x)
link.fit$var<-link.fit$deriv %*% link.fit$cov.fit %*% linkfit$deriv
link.fit$var<-link.fit$deriv %*% link.fit$cov.fit %*% link.fit$deriv
logEstimates<-data.frame(est=link.fit$mean,
se=sqrt(link.fit$var))
logEstimates
link.fit$var<-link.fit$deriv * link.fit$cov.fit * link.fit$deriv
logEstimates<-data.frame(est=link.fit$mean,
se=sqrt(link.fit$var))
link.fit<-predict(log.glm,
type="link",
se.fit=TRUE,
cov.fit=TRUE,
newdat=newData)
link.fit$mean<-exp(link.fit$fit)
link.fit$deriv<-exp(link.fit$fit) #derivative of exp(x) is exp(x)
link.fit$var<-link.fit$deriv * link.fit$cov.fit * link.fit$deriv
link.fit$var
link.fit$var<-link.fit$deriv * diag(link.fit$cov.fit) * link.fit$deriv
logEstimates<-data.frame(est=link.fit$mean,
se=sqrt(link.fit$var))
logEstimates
VarianceOfMean<-VarianceOfSum*(1/nrow(newData))^2
VarianceOfSum<-link.fit$deriv %*% diag(link.fit$cov.fit) %*% link.fit$deriv
VarianceOfMean<-VarianceOfSum*(1/nrow(newData))^2
SEofMean<-sqrt(VarianceOfMean)
SEofMean
meanVal<-mean(log.fit$mean)
VarianceOfSum<-link.fit$deriv %*% diag(link.fit$cov.fit) %*% link.fit$deriv
VarianceOfSum
VarianceOfSum<-t(link.fit$deriv) %*% diag(link.fit$cov.fit) %*% link.fit$deriv
VarianceOfSum
t(link.fit$deriv)
link.fit$deriv
VarianceOfSum<-t(link.fit$deriv) %*% ink.fit$cov.fit %*% link.fit$deriv
VarianceOfSum<-t(link.fit$deriv) %*% link.fit$cov.fit %*% link.fit$deriv
VarianceOfSum
VarianceOfMean<-VarianceOfSum*(1/nrow(newData))^2
SEofMean<-sqrt(VarianceOfMean)
SEofMean
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE,
cov.fit=TRUE)
logit.fit$prob<-ilogit(logit.fit$prob)
logit.fit$prob<-ilogit(logit.fit$fit)
logit.fit$deriv<-exp(logit.fit)/(exp(logit.fit)+1)^2  #derivative of inverse logit
logit.fit$deriv<-exp(logit.fit$fit)/(exp(logit.fit$fit)+1)^2  #derivative of inverse logit
logit.fit$var<-logit.fit$deriv * diag(logit.fit$cov.fit) * logit.fit$deriv
probEstimates<-data.frame(est=logit.fit$prob,
se=sqrt(logit.fit$var))
probEstimates
probEstimates
prob.fit
probEstimates
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE,
cov.fit=TRUE)
logit.fit$prob<-ilogit(logit.fit$fit)
logit.fit$deriv<-exp(logit.fit$fit)/(exp(logit.fit$fit)+1)^2  #derivative of inverse logit
logit.fit$var<-logit.fit$deriv * diag(logit.fit$cov.fit) * logit.fit$deriv
probEstimates<-data.frame(est=logit.fit$prob,
se=sqrt(logit.fit$var))
probEstimates
logit.glm<-glmmTMB(presence~x,data=toy,family="binomial")
newData<-data.frame(x=seq(0,1,0.1))
prob.fit<-predict(logit.glm,
type="response",
se.fit=TRUE,
newdat=newData) %>%
as.data.frame()
prob.fit
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE,
cov.fit=TRUE)
logit.fit$prob<-ilogit(logit.fit$fit)
logit.fit$deriv<-exp(logit.fit$fit)/(exp(logit.fit$fit)+1)^2  #derivative of inverse logit
logit.fit$var<-logit.fit$deriv * diag(logit.fit$cov.fit) * logit.fit$deriv
probEstimates<-data.frame(est=logit.fit$prob,
se=sqrt(logit.fit$var))
probEstimates
#Same answer as from type = "response"
combined<-cbind(probEstimates,prob.fit)
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE,
cov.fit=TRUE,
newdata=newData)
logit.fit$prob<-ilogit(logit.fit$fit)
logit.fit$deriv<-exp(logit.fit$fit)/(exp(logit.fit$fit)+1)^2  #derivative of inverse logit
logit.fit$var<-logit.fit$deriv * diag(logit.fit$cov.fit) * logit.fit$deriv
probEstimates<-data.frame(est=logit.fit$prob,
se=sqrt(logit.fit$var))
probEstimates
#Same answer as from type = "response"
VarianceOfPMean<-VarianceOfPSum*(1/nrow(newData))^2
meanVal<-mean(logit.fit$prob)
VarianceOfPSum<-t(logit.fit$deriv) %*% logit.fit$cov.fit %*% logit.fit$deriv
VarianceOfPMean<-VarianceOfPSum*(1/nrow(newData))^2
SEofPMean<-sqrt(VarianceOfPMean)
SEofPMean
allPred<-cbind(probEstimates,logEstimates)
allPred
allPred<-bind_cols(probEstimates,logEstimates)
allPred
logit.fit<-predict(logit.glm,type="link",
se.fit=TRUE,
cov.fit=TRUE,
newdata=newData)
logit.fit$prob<-ilogit(logit.fit$fit)
logit.fit$deriv<-exp(logit.fit$fit)/(exp(logit.fit$fit)+1)^2  #derivative of inverse logit
logit.fit$var<-logit.fit$deriv * diag(logit.fit$cov.fit) * logit.fit$deriv
probEstimates<-data.frame(p.est=logit.fit$prob,
p.se=sqrt(logit.fit$var))
probEstimates
#Same answer as from type = "response"
allPred<-bind_cols(probEstimates,logEstimates)
allPred
allEst<-bind_cols(probEstimates,logEstimates) %>%
mutate(product=p.est*est,
se.product=sqrt(p.est^2*se^2+est^2*p.se^2))
allEst
ProductOfMeans<-meanVal*meanValP
meanPVal<-mean(logit.fit$prob)
meanVal<-mean(log.fit$mean)
ProductOfMeans<-meanVal*meanPVal
SeOfProdect<-sqrt(meanVal^2*SEofMean^2+meanPVal^2*SEofPMean^2)
SeOfProduct<-sqrt(meanVal^2*SEofMean^2+meanPVal^2*SEofPMean^2)
SeOfProduct
